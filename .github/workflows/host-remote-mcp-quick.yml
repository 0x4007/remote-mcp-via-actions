name: Host Remote MCP Servers (Quick Tunnel)

on:
  workflow_dispatch:

jobs:
  host-mcp:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # Max 6 hours (360 minutes)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install MCP HTTP Bridge dependencies
        working-directory: mcp-http-bridge
        run: |
          pip install -r requirements.txt

      - name: Make install script executable
        run: chmod +x install-mcp-servers.sh

      - name: Install MCP servers
        run: |
          # Set up environment
          export OPENROUTER_API_KEY=${{ secrets.OPENROUTER_TOKEN }}
          
          # Run installation script
          ./install-mcp-servers.sh

      - name: Start MCP HTTP Bridge
        working-directory: mcp-http-bridge
        run: |
          # Start the bridge server
          echo "Starting MCP HTTP Bridge..."
          nohup python server.py > bridge.log 2>&1 &
          BRIDGE_PID=$!
          echo "Bridge started with PID: $BRIDGE_PID"
          
          # Wait for bridge to start
          echo "Waiting for bridge to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ MCP HTTP Bridge started successfully"
              
              # List available servers
              echo "Available MCP servers:"
              curl -s http://localhost:8080/servers | jq
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Verify bridge is running
          if ! curl -s http://localhost:8080/health > /dev/null 2>&1; then
            echo "❌ Failed to start MCP HTTP Bridge"
            echo "Bridge logs:"
            cat bridge.log
            exit 1
          fi

      - name: Set up Cloudflare Tunnel
        uses: AnimMouse/setup-cloudflared@v1

      - name: Start Cloudflare Quick Tunnel
        run: |
          echo "Starting Cloudflare quick tunnel..."
          nohup cloudflared tunnel --no-autoupdate --url http://localhost:8080 > cloudflared.log 2>&1 &
          TUNNEL_PID=$!
          echo "Cloudflare tunnel starting with PID: $TUNNEL_PID"
          
          # Wait for tunnel URL
          echo "Waiting for tunnel URL..."
          for i in {1..30}; do
            if grep -q "https://.*\.trycloudflare\.com" cloudflared.log; then
              echo "✅ Tunnel URL found!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Extract the tunnel URL
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' cloudflared.log | head -1)
          
          if [ -z "$TUNNEL_URL" ]; then
            echo "❌ Failed to get tunnel URL"
            cat cloudflared.log
            exit 1
          fi
          
          echo "TUNNEL_URL=$TUNNEL_URL" >> $GITHUB_ENV
          echo "✅ Tunnel established at: $TUNNEL_URL"
          
          # Save to file
          echo "$TUNNEL_URL" > tunnel_url.txt

      - name: Display endpoint info
        run: |
          echo "==================================="
          echo "MCP servers are now accessible at:"
          echo "$TUNNEL_URL"
          echo "==================================="
          echo ""
          echo "Available endpoints:"
          echo "  Health: $TUNNEL_URL/health"
          echo "  Servers: $TUNNEL_URL/servers"
          echo "  Zen tools: $TUNNEL_URL/servers/zen/tools"
          echo ""
          
          # Save endpoints to file
          cat > endpoints.txt << EOF
          MCP Server Endpoints:
          Base URL: $TUNNEL_URL
          Health: $TUNNEL_URL/health
          Servers: $TUNNEL_URL/servers
          Zen tools: $TUNNEL_URL/servers/zen/tools
          EOF
          
          # Test the public endpoint
          echo "Testing public endpoint..."
          sleep 5
          
          HEALTH_RESPONSE=$(curl -s --max-time 10 $TUNNEL_URL/health 2>&1 || true)
          
          if echo "$HEALTH_RESPONSE" | jq -e . > /dev/null 2>&1; then
            echo "✅ Public endpoint is working!"
            echo "$HEALTH_RESPONSE" | jq
          else
            echo "❌ Public endpoint test failed!"
            echo "Response:"
            echo "$HEALTH_RESPONSE"
            exit 1
          fi

      - name: Upload tunnel info
        uses: actions/upload-artifact@v4
        with:
          name: tunnel-info
          path: |
            tunnel_url.txt
            endpoints.txt
            cloudflared.log

      - name: Keep server running
        run: |
          echo "MCP servers running. Will stay active for up to 6 hours..."
          echo "Tunnel URL: $TUNNEL_URL"
          
          # Monitor the bridge process
          BRIDGE_PID=$(pgrep -f "python server.py")
          
          # Sleep for 5 hours 50 minutes, checking every 5 minutes
          for i in {1..70}; do
            if ! kill -0 $BRIDGE_PID 2>/dev/null; then
              echo "⚠️ Bridge process died! Logs:"
              cat mcp-http-bridge/bridge.log
              exit 1
            fi
            echo "[$(date)] Still running... ($(($i * 5)) minutes elapsed)"
            echo "Tunnel URL: $TUNNEL_URL"
            sleep 300  # 5 minutes
          done
          
          echo "Shutting down after timeout"