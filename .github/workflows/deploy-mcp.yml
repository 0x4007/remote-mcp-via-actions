name: Deploy MCP

on:
  workflow_dispatch:

jobs:
  host-mcp:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # Max 6 hours (360 minutes)

    steps:
      - name: Cancel existing runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for existing in-progress workflow runs..."
          
          # Get the current run ID to avoid canceling ourselves
          CURRENT_RUN_ID=${{ github.run_id }}
          echo "Current run ID: $CURRENT_RUN_ID"
          
          # Get all in-progress runs for this workflow
          IN_PROGRESS_RUNS=$(gh run list \
            --workflow deploy-mcp.yml \
            --repo ${{ github.repository }} \
            --status in_progress \
            --json databaseId,name,createdAt \
            -q '.[] | select(.databaseId != '$CURRENT_RUN_ID') | .databaseId')
          
          if [ -z "$IN_PROGRESS_RUNS" ]; then
            echo "✓ No other in-progress workflow runs found."
          else
            echo "Found in-progress runs to cancel:"
            echo "$IN_PROGRESS_RUNS"
            echo ""
            
            # Cancel each running workflow
            echo "$IN_PROGRESS_RUNS" | while read -r RUN_ID; do
              if [ ! -z "$RUN_ID" ]; then
                echo "Cancelling run $RUN_ID..."
                gh run cancel $RUN_ID --repo ${{ github.repository }} || true
              fi
            done
            
            echo ""
            echo "✓ All previous runs cancelled. Proceeding with new deployment."
            
            # Wait a moment for cancellations to process
            sleep 5
          fi
          
          echo ""
          echo "Current workflow status:"
          gh run list --workflow deploy-mcp.yml --repo ${{ github.repository }} --limit 5

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        run: |
          echo "Checking submodules..."
          git submodule status
          echo ""
          echo "MCP servers directory:"
          ls -la mcp-servers/
          echo ""
          if [ -d "mcp-servers/zen-mcp-server" ]; then
            echo "✅ Zen server submodule found"
            ls -la mcp-servers/zen-mcp-server/ | head -10
          else
            echo "❌ Zen server submodule NOT found!"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install MCP Server dependencies
        working-directory: src/bridge
        run: |
          npm install

      - name: Install Zen server dependencies
        run: |
          if [ -f "mcp-servers/zen-mcp-server/requirements.txt" ]; then
            echo "Installing Zen server Python dependencies..."
            cd mcp-servers/zen-mcp-server
            pip install -r requirements.txt
            echo "✅ Zen server dependencies installed"
          else
            echo "⚠️ Zen server requirements.txt not found - submodules may not be checked out"
            ls -la mcp-servers/
          fi

      - name: Create required directories
        run: |
          mkdir -p logs tmp

      - name: Start Custom MCP Server
        working-directory: src/bridge
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Export environment variables
          export GITHUB_SHA=${{ github.sha }}
          export DEPLOYMENT_VERSION="${{ github.sha }}"
          export DEPLOYMENT_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          export OPENROUTER_API_KEY="${OPENROUTER_API_KEY}"

          # Start the custom MCP server
          echo "Starting Custom MCP Server..."
          echo "Deployment version: ${GITHUB_SHA:0:8}"
          nohup node server.js > bridge.log 2>&1 &
          BRIDGE_PID=$!
          echo "Custom MCP Server started with PID: $BRIDGE_PID"

          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8081/health > /dev/null 2>&1; then
              echo "✅ Custom MCP Server started successfully"

              # Display server info
              echo "Server info:"
              curl -s http://localhost:8081/health | jq
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

          # Verify server is running
          if ! curl -s http://localhost:8081/health > /dev/null 2>&1; then
            echo "❌ Failed to start Custom MCP Server"
            echo "Server logs:"
            cat bridge.log
            exit 1
          fi

      - name: Set up Cloudflare Tunnel
        uses: AnimMouse/setup-cloudflared@v1

      - name: Start Cloudflare Quick Tunnel
        run: |
          echo "Starting Cloudflare quick tunnel..."
          nohup cloudflared tunnel --no-autoupdate --url http://localhost:8081 > logs/cloudflared.log 2>&1 &
          TUNNEL_PID=$!
          echo "Cloudflare tunnel starting with PID: $TUNNEL_PID"

          # Wait for tunnel URL
          echo "Waiting for tunnel URL..."
          for i in {1..30}; do
            if grep -q "https://.*\.trycloudflare\.com" logs/cloudflared.log; then
              echo "✅ Tunnel URL found!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

          # Extract the tunnel URL
          TUNNEL_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' logs/cloudflared.log | head -1)

          if [ -z "$TUNNEL_URL" ]; then
            echo "❌ Failed to get tunnel URL"
            cat logs/cloudflared.log
            exit 1
          fi

          echo "TUNNEL_URL=$TUNNEL_URL" >> $GITHUB_ENV
          echo "✅ Tunnel established at: $TUNNEL_URL"

          # Save to file
          echo "$TUNNEL_URL" > tmp/tunnel_url.txt

      - name: Display endpoint info
        run: |
          echo "==================================="
          echo "Custom MCP Server is now accessible at:"
          echo "$TUNNEL_URL"
          echo ""
          echo "Custom domain will be available at:"
          echo "https://mcp.pavlovcik.com"
          echo "(DNS propagation may take a few minutes)"
          echo ""
          echo "Deployment version: ${{ github.sha }}"
          echo "==================================="
          echo ""
          echo "Available endpoints:"
          echo "  Health: $TUNNEL_URL/health"
          echo "  MCP Protocol: $TUNNEL_URL/"
          echo ""
          echo "Via custom domain (after DNS propagates):"
          echo "  Health: https://mcp.pavlovcik.com/health"
          echo "  MCP Protocol: https://mcp.pavlovcik.com/"
          echo ""
          echo "Available tools: 21+ tools from main, calculator, and Zen servers"
          echo ""

          # Save endpoints to file
          cat > tmp/endpoints.txt << EOF
          Custom MCP Server Endpoints:
          Base URL: $TUNNEL_URL
          Health: $TUNNEL_URL/health
          MCP Protocol: $TUNNEL_URL/
          Tools: calculate_sum, echo
          EOF

          # Test the public endpoint
          echo "Testing public endpoint..."
          sleep 5

          HEALTH_RESPONSE=$(curl -s --max-time 10 $TUNNEL_URL/health 2>&1 || true)

          if echo "$HEALTH_RESPONSE" | jq -e . > /dev/null 2>&1; then
            echo "✅ Public endpoint is working!"
            echo "$HEALTH_RESPONSE" | jq
            echo "ENDPOINT_TEST_PASSED=true" >> $GITHUB_ENV
          else
            echo "❌ Public endpoint test failed!"
            echo "Response:"
            echo "$HEALTH_RESPONSE"
            echo "ENDPOINT_TEST_PASSED=false" >> $GITHUB_ENV
            echo "⚠️  Will not update KV store with broken tunnel URL"
            echo "⚠️  Continuing deployment but skipping KV update to prevent breaking existing service"
          fi

      - name: Upload tunnel info
        uses: actions/upload-artifact@v4
        with:
          name: tunnel-info
          path: |
            tmp/tunnel_url.txt
            tmp/endpoints.txt
            logs/cloudflared.log

      - name: Update tunnel status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a simple JSON file with the current tunnel URL
          mkdir -p docs
          cat > docs/tunnel-status.json << EOF
          {
            "url": "$TUNNEL_URL",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "active",
            "endpoints": {
              "health": "$TUNNEL_URL/health",
              "mcp": "$TUNNEL_URL/"
            },
            "tools": ["21+ tools from multiple servers"],
            "servers": ["main", "example-calculator", "zen-mcp-server"],
            "protocol": "MCP Streamable HTTP 2025-06-18"
          }
          EOF

          echo "Tunnel status saved"

          # Commit and push to GitHub Pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/tunnel-status.json
          git commit -m "Update tunnel status" || echo "No changes to commit"
          git push || echo "Push failed"

      - name: Update Cloudflare Worker KV
        if: env.ENDPOINT_TEST_PASSED == 'true'
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Updating Cloudflare Worker KV with tunnel URL..."

          # KV namespace ID for MCP_TUNNEL_URL
          KV_NAMESPACE_ID="7e1605c08a3c407c9f8a331f25b5c117"

          # Update KV with tunnel URL
          KV_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/storage/kv/namespaces/$KV_NAMESPACE_ID/values/url" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: text/plain" \
            --data "$TUNNEL_URL")

          echo "✅ Worker KV updated with tunnel URL"
          echo "mcp.pavlovcik.com will now proxy to $TUNNEL_URL"
          echo ""
          echo "Claude Code MCP configuration:"
          echo "claude mcp add --transport http custom-demo https://mcp.pavlovcik.com/"

      - name: KV Update Skipped
        if: env.ENDPOINT_TEST_PASSED == 'false'
        run: |
          echo "⚠️  KV update was skipped due to failed endpoint test"
          echo "⚠️  The existing mcp.pavlovcik.com service should continue working"
          echo "⚠️  This prevents breaking the service when tunnel registration fails"

      - name: Keep server running
        # Always keep running, even if endpoint test fails (for debugging)
        run: |
          echo "Custom MCP Server running at: $TUNNEL_URL"
          echo "Available tools: 21+ tools from main, calculator, and Zen servers"
          echo "Protocol: MCP Streamable HTTP 2025-06-18"
          echo ""
          echo "⏱️  Server has a 1-hour inactivity timeout"
          echo "The server will automatically shut down if no MCP requests are received for 1 hour."
          echo "Health check requests do not reset the timeout timer."
          echo ""
          echo "Server will keep running until either:"
          echo "  - 1 hour of inactivity (no MCP requests)"
          echo "  - GitHub Actions timeout (6 hours max)"
          echo ""

          # Monitor the server process
          BRIDGE_PID=$(pgrep -f "node server.js")

          # Keep checking if the process is alive
          while kill -0 $BRIDGE_PID 2>/dev/null; do
            # Check health endpoint
            HEALTH_RESPONSE=$(curl -s http://localhost:8081/health 2>/dev/null || echo "{}")
            if echo "$HEALTH_RESPONSE" | jq -e . > /dev/null 2>&1; then
              UPTIME=$(echo "$HEALTH_RESPONSE" | jq -r '.uptime // 0')
              SESSIONS=$(echo "$HEALTH_RESPONSE" | jq -r '.activeSessions // 0')
              TIMEOUT_SECS=$(echo "$HEALTH_RESPONSE" | jq -r '.timeUntilTimeout // 900')
              TIMEOUT_MINS=$((TIMEOUT_SECS / 60))
              echo "[$(date)] Server running - Uptime: ${UPTIME}s, Active sessions: ${SESSIONS}, Timeout in: ${TIMEOUT_MINS} minutes"
            fi

            sleep 60  # Check every minute
          done

          echo "Server has shut down"

      - name: Deployment Failed - Cleanup
        if: env.ENDPOINT_TEST_PASSED == 'false'
        run: |
          echo "❌ Deployment failed due to tunnel connectivity issues"
          echo "❌ Existing service at mcp.pavlovcik.com should continue working"
          echo "❌ This deployment will be terminated to avoid resource waste"
          echo ""
          echo "To debug:"
          echo "1. Check if cloudflared tunnel process died early"
          echo "2. Check tunnel registration logs"
          echo "3. Verify local server is responding on port 8081"